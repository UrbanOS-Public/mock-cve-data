import Vehicle from './Vehicle';
import VehicleMover from './VehicleMover';
import { VEHICLE_MOVEMENT_PERIOD_MS } from './configuration';
import each from 'jest-each';

jest.useFakeTimers();

describe('VehicleMover', () => {
    let mockAdvanceOnPathOne: jest.Mock;
    let mockAdvanceOnPathTwo: jest.Mock;
    let mockAdvanceOnPathThree: jest.Mock;
    let mockVehicleOne: any;
    let mockVehicleTwo: any;
    let mockVehicleThree: any;

    beforeEach(() => {
        mockAdvanceOnPathOne = jest.fn();
        mockAdvanceOnPathTwo = jest.fn();
        mockAdvanceOnPathThree = jest.fn();
        mockVehicleOne = {
            advanceOnPath: mockAdvanceOnPathOne,
            isCrashed: () => false,
        };
        mockVehicleTwo = {
            advanceOnPath: mockAdvanceOnPathTwo,
            isCrashed: () => false,
        };
        mockVehicleThree = {
            advanceOnPath: mockAdvanceOnPathThree,
            isCrashed: () => true,
        };
    });

    each([
        ["Doesn't move a vehicle on construction", 0],
        ['A vehicle moves as the timer advances one period', 1],
        ['A vehicle moves as the timer advances two period', 2],
    ]).it('%s', (text, advancements) => {
        const vehicles = [mockVehicleOne as Vehicle];
        const mover = new VehicleMover(vehicles);
        mover.startMovingVehicles();
        jest.advanceTimersByTime(VEHICLE_MOVEMENT_PERIOD_MS * advancements);
        expect(mockAdvanceOnPathOne).toHaveBeenCalledTimes(advancements);
    });

    each([
        ["Doesn't move a pair of vehicles on construction", 0],
        ['A pair of vehicles moves as the timer advances one period', 1],
        ['A pair of vehicles moves as the timer advances two period', 2],
    ]).it('%s', (text, advancements) => {
        const vehicles = [mockVehicleOne as Vehicle, mockVehicleTwo as Vehicle];
        const mover = new VehicleMover(vehicles);
        mover.startMovingVehicles();
        jest.advanceTimersByTime(VEHICLE_MOVEMENT_PERIOD_MS * advancements);
        expect(mockAdvanceOnPathOne).toHaveBeenCalledTimes(advancements);
        expect(mockAdvanceOnPathTwo).toHaveBeenCalledTimes(advancements);
    });

    it('throws an error when constructed with no vehicles', () => {
        expect(() => new VehicleMover([])).toThrowError(
            /VehicleMover constructed with no Vehicles/,
        );
    });

    it("Doesn't advance crashed vehicles", () => {
        const vehicles = [mockVehicleThree as Vehicle];
        const mover = new VehicleMover(vehicles);
        mover.startMovingVehicles();
        jest.advanceTimersByTime(VEHICLE_MOVEMENT_PERIOD_MS * 1);
        expect(mockAdvanceOnPathThree).not.toBeCalled();
    });
});
