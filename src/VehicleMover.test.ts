import { vehicleFactory } from './__mocks__/Vehicle';
import VehicleMover from './VehicleMover';
import { VEHICLE_MOVEMENT_PERIOD_MS } from './configuration';
import each from 'jest-each';

jest.useFakeTimers();

describe('VehicleMover', () => {
    each([
        ["Doesn't move a vehicle on construction", 0],
        ['A vehicle moves as the timer advances one period', 1],
        ['A vehicle moves as the timer advances two period', 2],
    ]).it('%s', (text, advancements) => {
        const v1 = vehicleFactory({});
        const mover = new VehicleMover([v1]);
        mover.startMovingVehicles();
        jest.advanceTimersByTime(VEHICLE_MOVEMENT_PERIOD_MS * advancements);
        expect(v1.advanceOnPath).toHaveBeenCalledTimes(advancements);
    });

    each([
        ["Doesn't move a pair of vehicles on construction", 0],
        ['A pair of vehicles moves as the timer advances one period', 1],
        ['A pair of vehicles moves as the timer advances two period', 2],
    ]).it('%s', (text, advancements) => {
        const v1 = vehicleFactory({});
        const v2 = vehicleFactory({});
        const mover = new VehicleMover([v1, v2]);
        mover.startMovingVehicles();
        jest.advanceTimersByTime(VEHICLE_MOVEMENT_PERIOD_MS * advancements);
        expect(v1.advanceOnPath).toHaveBeenCalledTimes(advancements);
        expect(v2.advanceOnPath).toHaveBeenCalledTimes(advancements);
    });

    it('throws an error when constructed with no vehicles', () => {
        expect(() => new VehicleMover([])).toThrowError(
            /VehicleMover constructed with no Vehicles/,
        );
    });

    it("Doesn't advance crashed vehicles", () => {
        const v1 = vehicleFactory({ isCrashed: true });
        const mover = new VehicleMover([v1]);
        mover.startMovingVehicles();
        jest.advanceTimersByTime(VEHICLE_MOVEMENT_PERIOD_MS * 1);
        expect(v1.advanceOnPath).not.toBeCalled();
    });
});
