import Vehicle from './Vehicle';
import VehicleMover from './VehicleMover';
import { VEHICLE_MOVEMENT_PERIOD_MS } from './configuration';

jest.useFakeTimers();

describe('VehicleMover', () => {
    let mockAdvanceOnPathOne: jest.Mock;
    // let mockAdvanceOnPathTwo: jest.Mock;
    let vehicles = [] as Vehicle[];
    let mockVehicleOne: any;

    // Two vehicles advance one time

    beforeEach(() => {
        mockAdvanceOnPathOne = jest.fn();
        // mockAdvanceOnPathTwo = jest.fn();
        mockVehicleOne = { advanceOnPath: mockAdvanceOnPathOne };
    });

    it("Doesn't move a vehicle on construction", () => {
        vehicles = [mockVehicleOne as Vehicle];
        new VehicleMover(vehicles);
        expect(mockAdvanceOnPathOne).not.toHaveBeenCalled();
    });

    it('A vehicle moves as the timer advances one period', () => {
        vehicles = [mockVehicleOne as Vehicle];
        const mover = new VehicleMover(vehicles);
        mover.startMovingVehicles();
        jest.advanceTimersByTime(VEHICLE_MOVEMENT_PERIOD_MS);
        expect(mockAdvanceOnPathOne).toHaveBeenCalled();
    });

    it('A vehicle moves as the timer advances two period', () => {
        vehicles = [mockVehicleOne as Vehicle];
        const mover = new VehicleMover(vehicles);
        mover.startMovingVehicles();
        jest.advanceTimersByTime(VEHICLE_MOVEMENT_PERIOD_MS * 2);
        expect(mockAdvanceOnPathOne).toHaveBeenCalledTimes(2);
    });

    // it(`Advances each vehicle every ${movementPeriodMs} ms`, () => {
    //     const mockAdvanceOnPathOne = jest.fn();
    //     const mockAdvanceOnPathTwo = jest.fn();

    //     const vehicles = [
    //         () => {
    //             return { advanceOnPath: mockAdvanceOnPathOne };
    //         },
    //         () => {
    //             return { advanceOnPath: mockAdvanceOnPathTwo };
    //         },
    //     ] as Vehicle[];

    //     const mover = new VehicleMover(vehicles);

    //     expect(mockAdvanceOnPathOne).not.toHaveBeenCalled();
    //     expect(mockAdvanceOnPathTwo).not.toHaveBeenCalled();
    //     jest.advanceTimersByTime(movementPeriodMs);
    //     expect(mockAdvanceOnPathOne).toHaveBeenCalledTimes(1);
    //     expect(mockAdvanceOnPathTwo).toHaveBeenCalledTimes(1);
    //     jest.advanceTimersByTime(movementPeriodMs);
    //     expect(mockAdvanceOnPathOne).toHaveBeenCalledTimes(2);
    //     expect(mockAdvanceOnPathTwo).toHaveBeenCalledTimes(2);
    // });
});
