import { PATH_DATA_DIR } from './configuration';
import CVEPathData from './CVEPathData';

describe('PathData', () => {
    let cvePathData: CVEPathData;
    const fakeJsonName = 'test_json';
    const fakePath = [{ key: 'one' }, { key: 'two' }];

    beforeEach(async () => {
        jest.resetModules();
        jest.restoreAllMocks();
        jest.mock(`${PATH_DATA_DIR}/${fakeJsonName}.json`, () => fakePath, {
            virtual: true,
        });
        cvePathData = new CVEPathData([fakeJsonName]);
        await cvePathData.load();
    });

    it('#getPointFromPath provides the specified point from a specified path', () => {
        expect(cvePathData.getPointFromPath(0, 1)).toBe(fakePath[1]);
    });

    it("#getPointFromPath throws an error if asking for a path that doesn't exist", () => {
        expect(() => cvePathData.getPointFromPath(1, 0)).toThrow(
            'Path 1 out of range',
        );
    });

    it("#getPointFromPath throws an error if asking for a point that doesn't exist", () => {
        expect(() => cvePathData.getPointFromPath(0, 2)).toThrowError(
            'Point 2 out of range',
        );
    });
});
