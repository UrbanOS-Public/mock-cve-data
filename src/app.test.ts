import app from './app';
import supertest from 'supertest';
import { PATH_IDS } from './configuration';

// see mocking_readme.md for detailed overview of how mocking works
import * as MockVehicleMover from './__mocks__/VehicleMover';
import * as VehicleMover from './VehicleMover';
import * as MockCVEPathData from './__mocks__/CVEPathData';
import * as CVEPathData from './CVEPathData';

jest.mock('uuid', () => ({ v4: () => '00000000-0000-0000-0000-000000000000' }));
jest.mock('./CVEPathData');
jest.mock('./VehicleMover');

const { default: mockVehicleMoverConstructor, mockStartMovingVehicles } =
    VehicleMover as unknown as typeof MockVehicleMover;

const { default: mockCVEPathDataConstructor, mockLoadCVEData } =
    CVEPathData as unknown as typeof MockCVEPathData;

describe('Application', () => {
    it('Loads CVE data on app start', async () => {
        await supertest(app);
        expect(mockLoadCVEData).toHaveBeenCalledTimes(1);
    });

    it('Constructs A CVEPathData instance with the configured PathIDs on app start', async () => {
        await supertest(app);
        expect(mockCVEPathDataConstructor).toHaveBeenCalledWith(PATH_IDS);
    });

    it('Puts vehicles in motion with VehicleMover on app start', async () => {
        await supertest(app);
        expect(mockVehicleMoverConstructor).toHaveBeenCalledTimes(1);
        expect(mockStartMovingVehicles).toHaveBeenCalledTimes(1);
    });
});
