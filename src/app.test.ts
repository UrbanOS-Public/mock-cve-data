import app from './app';
import supertest from 'supertest';
import { HEALTH_MSG, PATH_IDS } from './configuration';
import CVEPathData, { PathPoint } from './CVEPathData';
import VehicleMover from './VehicleMover';

jest.mock('uuid', () => ({ v4: () => '00000000-0000-0000-0000-000000000000' }));

let mockLoadCVEData: jest.Mock<Promise<void>, []>;
let mockGetPath: jest.Mock;
let mockStartMovingVehicles: jest.Mock;
const fakePath = [{ lat: 0, long: 0, messagebody: 'fake' }];

jest.mock('./CVEPathData', function () {
    mockLoadCVEData = jest.fn(() => Promise.resolve());
    mockGetPath = jest.fn(() => fakePath);
    return jest.fn().mockImplementation(function () {
        return {
            loadCVEData: mockLoadCVEData,
            getPath: mockGetPath,
        };
    });
});

jest.mock('./VehicleMover', function () {
    mockStartMovingVehicles = jest.fn();
    return jest.fn().mockImplementation(function () {
        return {
            startMovingVehicles: mockStartMovingVehicles,
        };
    });
});

describe('Application', () => {
    it('Loads CVE data on app start', async () => {
        await supertest(app);
        expect(mockLoadCVEData).toHaveBeenCalledTimes(1);
    });

    it('Constructs A CVEPathData instance with the configured PathIDs on app start', async () => {
        await supertest(app);
        expect(CVEPathData).toHaveBeenCalledWith(PATH_IDS);
    });

    it('Puts vehicles in motion with VehicleMover on app start', async () => {
        await supertest(app);
        expect(VehicleMover).toHaveBeenCalledTimes(1);
        expect(mockStartMovingVehicles).toHaveBeenCalledTimes(1);
    });

    describe('GET - /healthcheck', () => {
        it('returns healthy', async () => {
            const res = await supertest(app).get('/healthcheck');
            expect(res.text).toEqual(HEALTH_MSG);
            expect(res.statusCode).toEqual(200);
        });
    });

    describe('GET - /data', () => {
        it('Returns the first point of each path', async () => {
            const res = await supertest(app).get('/data');
            const paths = res.body as PathPoint[];

            expect(paths?.length).toBeTruthy();
            paths.forEach((pathPoint, i) => {
                expect(pathPoint).toEqual({
                    ...fakePath[0],
                    pathId: PATH_IDS[i],
                    vehicleId: '00000000-0000-0000-0000-000000000000',
                });
            });
        });

        it("Doesn't re-load CVE data on subsequent requests", async () => {
            await supertest(app).get('/data');
            await supertest(app).get('/data');
            expect(CVEPathData).toHaveBeenCalledTimes(1);
        });
    });
});
