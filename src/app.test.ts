import app from './app';
import supertest from 'supertest';
import { HEALTH_MSG, PATH_IDS } from './configuration';
import CVEPathData, { PathPoint } from './CVEPathData';

describe('Application', () => {
    describe('GET - /healthcheck', () => {
        it('returns healthy', async () => {
            const res = await supertest(app).get('/healthcheck');
            expect(res.text).toEqual(HEALTH_MSG);
            expect(res.statusCode).toEqual(200);
        });
    });

    describe('GET - /data', () => {
        const fakePoint = { fake: 'one' };
        const mockLoad = jest.fn(() => Promise.resolve());
        const mockGetPointFromPath = jest.fn(() => fakePoint);

        jest.mock('./CVEPathData', () => {
            return jest.fn().mockImplementation(() => {
                return {
                    load: mockLoad,
                    getPointFromPath: mockGetPointFromPath,
                };
            });
        });
        const mockCVEPathData = CVEPathData as jest.MockedClass<
            typeof CVEPathData
        >;

        afterEach(() => {
            mockCVEPathData.mockReset();
        });

        it('Returns the first point of each path', async () => {
            const res = await supertest(app).get('/data');
            const paths = res.body as PathPoint[];
            paths.forEach((pathPoint) => {
                expect(pathPoint).toBe(fakePoint);
            });
        });

        it('Loads CVE data', async () => {
            await supertest(app).get('/data');
            expect(mockLoad).toHaveBeenCalled();
        });

        it('Constructs A CVEPathData instance with the configured PathIDs', async () => {
            await supertest(app).get('/data');
            expect(CVEPathData).toHaveBeenCalledWith(PATH_IDS);
        });

        it("Doesn't re-load CVE data on subsequent requests", async () => {
            await supertest(app).get('/data');
            await supertest(app).get('/data');
            expect(CVEPathData).toHaveBeenCalledTimes(1);
        });
    });
});
