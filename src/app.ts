import express from 'express';
import {
    HEALTH_MSG,
    ALL_VEHICLES_CRASHED_ERR_MSG,
    PATH_IDS,
    RESET_SUCCESS,
    crashAndResetOnTimerEnabled,
} from './configuration';
import CVEPathData from './CVEPathData';
import Vehicle from './Vehicle';
import VehicleMover from './VehicleMover';
import VehicleManager from './VehicleManager';
import path from 'path';
import { kickoffCrashAndReset } from './crashAndReset';

const app = express();

const vehicles = [] as Vehicle[];
const cvePathData = new CVEPathData(PATH_IDS);
let vehicleManager: VehicleManager;

const setVehiclesOnPath = () => {
    PATH_IDS.forEach((id) => {
        vehicles.push(new Vehicle(id, cvePathData));
    });
};

const startVehicleMovement = () => {
    const mover = new VehicleMover(vehicles);
    mover.startMovingVehicles();
};

const getLocationOfAllVehicles = () =>
    vehicles.map((vehicle) => vehicle.getCurrentLocation());

cvePathData.loadCVEData().then(() => {
    setVehiclesOnPath();
    startVehicleMovement();
    vehicleManager = new VehicleManager(vehicles);
    if (crashAndResetOnTimerEnabled) kickoffCrashAndReset(vehicleManager);
});

app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'pug');

app.get('/', (req, res) => {
    res.render('index', { title: 'Home' });
});

app.get('/healthcheck', function (req, res) {
    res.json({ status: HEALTH_MSG });
});

app.get('/data', function (req, res) {
    res.send(getLocationOfAllVehicles());
});

app.get('/crash', function (req, res) {
    const crashedVehicle = vehicleManager.crashAVehicle();
    if (crashedVehicle) res.json({ vehicleId: crashedVehicle });
    else res.status(400).json({ error: ALL_VEHICLES_CRASHED_ERR_MSG });
});

app.get('/reset', function (req, res) {
    vehicleManager.resetVehicles();
    res.json({ status: RESET_SUCCESS });
});

export default app;
