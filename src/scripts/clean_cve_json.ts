// What this script does:
/////////////////////////////////////
// for each file in the PATH_IDs of configuration.ts
// - load the file into memory
//     - for each point on the path
//       - move speed to top level from messagebody.coreData.speed
//       - convert speed from t/s^2 to mph
//       - add speed_unit as "mph" always
//       - drop everything under messagebody
//     - save that new array of points {filename_cleaned}.json
/////////////////////////////////////
// TODO: Add a small readme to the cve_path_json with an explanation of this
//       script, and a recap of how the spike data was originally collected

import * as fs from 'fs';
import { PATH_IDS, PATH_DATA_DIR } from '../configuration';

const cleanCVEData = () => {
    PATH_IDS.forEach((pathId) => {
        const newCVEData = [] as any;
        importData(pathId, (data) => {
            data.forEach((point: any) => {
                newCVEData.push(mapPointToCleanPoint(point));
            });
            exportNewCVEData(newCVEData, pathId);
            console.log(`newCVEData ${pathId}:`, newCVEData);
        });
    });
};

const exportNewCVEData = (newCVEData: any[], pathId: string) => {
    fs.writeFileSync(
        __dirname + `/../${PATH_DATA_DIR}/${pathId}_cleaned.json`,
        JSON.stringify(newCVEData, null, 2),
        { flag: 'w', encoding: 'utf-8' },
    );
};

const importData = (pathId: string, callback: (data: any) => void) => {
    import(`../${PATH_DATA_DIR}/${pathId}.json`).then(
        (data: { default: any }) => {
            callback(data.default);
        },
    );
};

const mapPointToCleanPoint = (point: any) => {
    return {
        lat: point.lat,
        long: point.long,
        speed: convertToMPH(point.messagebody.coreData.speed),
        speed_unit: 'mph',
        timestamp: point.timestamp,
    };
};

const convertToMPH = (preConvert: number) => (preConvert * 2.23694) / 50;

cleanCVEData();
