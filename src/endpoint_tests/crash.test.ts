import supertest from 'supertest';
import app from '../app';
import { ALL_VEHICLES_CRASHED_ERR_MSG } from '../configuration';

import * as MockVehicleManager from '../__mocks__/VehicleManager';
import * as VehicleManager from '../VehicleManager';

const { mockCrashAVehicle, idOfCrashedVehicle } =
    VehicleManager as unknown as typeof MockVehicleManager;

jest.mock('uuid', () => ({ v4: () => '00000000-0000-0000-0000-000000000000' }));
jest.mock('../CVEPathData');
jest.mock('../VehicleManager');

describe('GET - /crash', () => {
    it('Responds with the ID of the crashed vehicle', async () => {
        const res = await supertest(app).get('/crash');
        expect(res.status).toBe(200);
        expect(res.body).toEqual({ vehicleId: idOfCrashedVehicle });
    });

    it('Responds with 400 if there are no vehicles to crash', async () => {
        mockCrashAVehicle.mockImplementationOnce(() => {
            return undefined;
        });
        const res = await supertest(app).get('/crash');
        expect(res.status).toBe(400);
        expect(res.body).toEqual({ error: ALL_VEHICLES_CRASHED_ERR_MSG });
    });
});
