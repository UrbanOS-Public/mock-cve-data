import app from '../app';
import supertest from 'supertest';
import { PATH_IDS } from '../configuration';
import { PathPoint } from '../CVEPathData';

// see mocking_readme.md for detailed overview of how mocking works
import * as MockCVEPathData from '../__mocks__/CVEPathData';
import * as CVEPathData from '../CVEPathData';

const { default: mockCVEPathDataConstructor, fakePath } =
    CVEPathData as unknown as typeof MockCVEPathData;

jest.mock('uuid', () => ({ v4: () => '00000000-0000-0000-0000-000000000000' }));
jest.mock('../CVEPathData');
jest.mock('../VehicleMover');

describe('GET - /data', () => {
    it('Returns the first point of each path', async () => {
        const res = await supertest(app).get('/data');
        const paths = res.body as PathPoint[];

        expect(paths?.length).toBeTruthy();
        paths.forEach((pathPoint, i) => {
            expect(pathPoint).toEqual({
                ...fakePath[0],
                pathId: PATH_IDS[i],
                vehicleId: '00000000-0000-0000-0000-000000000000',
            });
        });
    });

    it("Doesn't re-load CVE data on subsequent requests", async () => {
        await supertest(app).get('/data');
        await supertest(app).get('/data');
        expect(mockCVEPathDataConstructor).toHaveBeenCalledTimes(1);
    });
});
