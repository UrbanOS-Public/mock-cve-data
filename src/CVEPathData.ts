import { PATH_DATA_DIR } from './configuration';

export interface PathPoint {
    lat: number;
    long: number;
    messagebody: any;
}

type Path = PathPoint[];

export default class CVEPathData {
    private paths = [] as Path[];
    private pathCount = 0;

    constructor(private pathIDs: string[]) {
        console.log('CONSTRUCT');
    }

    load(): Promise<void[]> {
        const imports = [] as Promise<void>[];
        this.pathIDs.forEach((id) => {
            imports.push(
                import(`${PATH_DATA_DIR}/${id}.json`).then(
                    (pathData: { default: PathPoint[] }) => {
                        this.pathCount = this.paths.push(pathData['default']);
                    },
                ),
            );
        });
        return Promise.all(imports);
    }

    getPointFromPath(pathIndex: number, pointIndex: number): PathPoint {
        if (pathIndex + 1 > this.pathCount || pathIndex < 0)
            throw Error(`Path ${pathIndex} out of range`);
        const path = this.paths[pathIndex];
        if (pointIndex + 1 > path.length || pointIndex < 0)
            throw Error(`Point ${pointIndex} out of range`);
        return path[pointIndex];
    }
}
