import CrashManager from './CrashManager';
import { vehicleFactory } from './__mocks__/Vehicle';

describe('CrashManager', () => {
    it('Calls v.crash on only the first vehicle if none are crashed', () => {
        const v1 = vehicleFactory({ isCrashed: false });
        const v2 = vehicleFactory({ isCrashed: false });
        const cm = new CrashManager([v1, v2]);
        cm.crashAVehicle();
        expect(v1.crash).toHaveBeenCalledTimes(1);
        expect(v2.crash).toHaveBeenCalledTimes(0);
    });
    it('Calls v.crash on only the 3rd vehicle if 2 are crashed', () => {
        const v1 = vehicleFactory({ isCrashed: true });
        const v2 = vehicleFactory({ isCrashed: true });
        const v3 = vehicleFactory({ isCrashed: false });
        const cm = new CrashManager([v1, v2, v3]);
        cm.crashAVehicle();
        expect(v1.crash).toHaveBeenCalledTimes(0);
        expect(v2.crash).toHaveBeenCalledTimes(0);
        expect(v3.crash).toHaveBeenCalledTimes(1);
    });
    it('Returns the ID of the vehicle crashed', () => {
        const v1 = vehicleFactory({ isCrashed: false, vehicleId: 'fake-id' });
        const cm = new CrashManager([v1]);
        expect(cm.crashAVehicle()).toBe('fake-id');
    });
    it('Returns undefined if no vehicle was crashed', () => {
        const v1 = vehicleFactory({ isCrashed: true });
        const v2 = vehicleFactory({ isCrashed: true });
        const cm = new CrashManager([v1, v2]);
        expect(cm.crashAVehicle()).toBeUndefined();
    });

    it('throws an error when constructed with no vehicles', () => {
        expect(() => new CrashManager([])).toThrowError(
            /CrashManager constructed with no Vehicles/,
        );
    });
});
