import { kickoffCrashAndReset } from './crashAndReset';
import { crashAndResetIntervalMS } from './configuration';
import VehicleManager from './VehicleManager';

describe('Crash and Reset', () => {
    const mockCrashAVehicle = jest.fn(() => '111');
    const mockResetVehicles = jest.fn();
    const mockVM = {
        crashAVehicle: mockCrashAVehicle,
        resetVehicles: mockResetVehicles,
    } as unknown;

    beforeEach(() => {
        mockCrashAVehicle.mockClear();
        mockResetVehicles.mockClear();
        jest.useFakeTimers();
    });

    afterEach(() => {
        jest.useRealTimers();
    });

    it('crashes a car after the configured amount', async () => {
        kickoffCrashAndReset(mockVM as VehicleManager);
        expect(mockCrashAVehicle).not.toBeCalled();
        jest.advanceTimersByTime(crashAndResetIntervalMS);
        expect(mockCrashAVehicle).toBeCalled();
    });

    it('calls reset 11 seconds after crashing a car', () => {
        kickoffCrashAndReset(mockVM as VehicleManager);
        expect(mockResetVehicles).not.toBeCalled();
        jest.advanceTimersByTime(crashAndResetIntervalMS);
        jest.advanceTimersByTime(11000);
        expect(mockResetVehicles).toBeCalled();
    });
});
