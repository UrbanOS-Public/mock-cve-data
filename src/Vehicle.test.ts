import { PATH_DATA_DIR } from './configuration';
import CVEPathData from './CVEPathData';
import Vehicle from './Vehicle';
import each from 'jest-each';

jest.mock('uuid', () => ({ v4: () => '00000000-0000-0000-0000-000000000000' }));

describe('Vehicle', () => {
    let cvePathData: CVEPathData;
    const fakePathId = 'fake_path_id';
    const fakePath = [
        { fakeCVEData: 'one', speed: 1 },
        { fakeCVEData: 'two', speed: 2 },
    ];

    beforeAll(async () => {
        jest.resetModules();
        jest.restoreAllMocks();
        jest.mock(
            `${PATH_DATA_DIR}/${fakePathId}_cleaned.json`,
            () => fakePath,
            {
                virtual: true,
            },
        );
        cvePathData = new CVEPathData([fakePathId]);
        await cvePathData.loadCVEData();
    });

    each([
        ['initial load sets first point', 0, 0],
        ['#andvanceOnPath basic advance', 1, 1],
        ['#advanceOnPath cycles to beginning', 2, 0],
    ]).it('"%s"', (text, numberOfAdvances, expectedPoint) => {
        const v = new Vehicle(fakePathId, cvePathData);
        for (let i = 0; i < numberOfAdvances; i++) {
            v.advanceOnPath();
        }
        const result = v.getCurrentLocation();
        expect(result).toEqual({
            path_id: fakePathId,
            vehicle_id: '00000000-0000-0000-0000-000000000000',
            is_crashed: false,
            ...fakePath[expectedPoint],
        });
    });

    it('#crash sets isCrashed to true', () => {
        const v = new Vehicle(fakePathId, cvePathData);

        expect(v.isCrashed()).toBe(false);
        v.crash();
        expect(v.isCrashed()).toBe(true);
    });

    it("#crash returns the vehicle's id", () => {
        const v = new Vehicle(fakePathId, cvePathData);

        expect(v.isCrashed()).toBe(false);
        const id = v.crash();
        expect(id).toBe('00000000-0000-0000-0000-000000000000');
    });

    it('#getCurrentLocation has speed as 0 when isCrashed', () => {
        const v = new Vehicle(fakePathId, cvePathData);

        v.crash();
        expect(v.getCurrentLocation()).toMatchObject({
            speed: 0,
        });
    });

    it('#getCurrentLocation contains is_crashed when isCrashed', () => {
        const v = new Vehicle(fakePathId, cvePathData);

        expect(v.getCurrentLocation()).toMatchObject({
            is_crashed: false,
        });
        v.crash();
        expect(v.getCurrentLocation()).toMatchObject({
            is_crashed: true,
        });
    });
});
