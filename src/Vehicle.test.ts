import { PATH_DATA_DIR } from './configuration';
import CVEPathData from './CVEPathData';
import Vehicle from './Vehicle';
import each from 'jest-each';

jest.mock('uuid', () => ({ v4: () => '00000000-0000-0000-0000-000000000000' }));

describe('Vehicle', () => {
    let cvePathData: CVEPathData;
    const fakePathId = 'fake_path_id';
    const fakePath = [{ fakeCVEData: 'one' }, { fakeCVEData: 'two' }];

    beforeAll(async () => {
        jest.resetModules();
        jest.restoreAllMocks();
        jest.mock(`${PATH_DATA_DIR}/${fakePathId}.json`, () => fakePath, {
            virtual: true,
        });
        cvePathData = new CVEPathData([fakePathId]);
        await cvePathData.loadCVEData();
    });

    each([
        ['initial load sets first point', 0, 0],
        ['#andvanceOnPath basic advance', 1, 1],
        ['#advanceOnPath cycles to beginning', 2, 0],
    ]).it('"%s"', (text, numberOfAdvances, expectedPoint) => {
        const v = new Vehicle(fakePathId, cvePathData);
        for (let i = 0; i < numberOfAdvances; i++) {
            v.advanceOnPath();
        }
        const result = v.getCurrentLocation();
        expect(result).toEqual({
            pathId: fakePathId,
            vehicleId: '00000000-0000-0000-0000-000000000000',
            ...fakePath[expectedPoint],
        });
    });
});
