import { PATH_DATA_DIR } from './configuration';
import CVEPathData, { Path } from './CVEPathData';
import Vehicle from './Vehicle';
import { v4 as uuidv4 } from 'uuid';

jest.mock('uuid', () => ({ v4: () => '00000000-0000-0000-0000-000000000000' }));

describe('Vehicle', () => {
    let cvePathData: CVEPathData;
    const fakePathId = 'fake_path_id';
    const fakePath = [{ fakeCVEData: 'one' }, { fakeCVEData: 'two' }];

    beforeAll(async () => {
        jest.resetModules();
        jest.restoreAllMocks();
        jest.mock(`${PATH_DATA_DIR}/${fakePathId}.json`, () => fakePath, {
            virtual: true,
        });
        cvePathData = new CVEPathData([fakePathId]);
        await cvePathData.load();
    });

    it('#getCurrentLocation returns the first point of a path after initialization', () => {
        const v = new Vehicle(fakePathId, cvePathData);
        expect(v.getCurrentLocation()).toEqual({
            pathId: fakePathId,
            vehicleId: '00000000-0000-0000-0000-000000000000',
            ...fakePath[0],
        });
    });
});
