import CVEPathData, { PathPoint } from './CVEPathData';
import { v4 as uuidv4 } from 'uuid';

interface VehicleLocation extends PathPoint {
    pathId: string;
    vehicleId: string;
    speed: number;
    is_crashed: boolean;
}

export default class Vehicle {
    private vehicleId: string;
    private vehiclePoint: number;
    private pathLength: number;
    private __isCrashed: boolean;

    constructor(private pathID: string, private pathData: CVEPathData) {
        this.vehicleId = uuidv4();
        this.vehiclePoint = 0;
        this.pathLength = pathData.getPath(pathID).length;
        this.__isCrashed = false;
    }

    private getPointOnPath(point: number) {
        return this.pathData.getPath(this.pathID)[point];
    }

    public advanceOnPath(): void {
        this.vehiclePoint + 1 === this.pathLength
            ? (this.vehiclePoint = 0)
            : (this.vehiclePoint += 1);
    }

    public getCurrentLocation(): VehicleLocation {
        return {
            pathId: this.pathID,
            vehicleId: this.vehicleId,
            // Hercules#64 - Replace -1 with real speed from JSON
            // waiting to pull this until it's higher in the source JSON
            speed: this.isCrashed() ? 0 : -1,
            is_crashed: this.isCrashed(),
            ...this.getPointOnPath(this.vehiclePoint),
        };
    }

    public crash(): string {
        this.__isCrashed = true;
        return this.vehicleId;
    }

    public isCrashed(): boolean {
        return this.__isCrashed;
    }
}
