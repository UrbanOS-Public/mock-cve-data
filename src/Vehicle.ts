import CVEPathData, { PathPoint } from './CVEPathData';
import { v4 as uuidv4 } from 'uuid';

interface VehicleLocation extends PathPoint {
    pathId: string;
    vehicleId: string;
}

export default class Vehicle {
    private vehicleId: string;
    private vehiclePoint: number;
    private indexGenerator: IterableIterator<number>;

    *generator(range: number[]): IterableIterator<number> {
        while (true) yield* range;
    }

    constructor(private pathID: string, private pathData: CVEPathData) {
        this.vehicleId = uuidv4();
        const pathLength: number = pathData.getPath(pathID).length;
        const indexArray: number[] = Array.from(Array(pathLength).keys());
        this.indexGenerator = this.generator(indexArray);
        this.vehiclePoint = this.indexGenerator.next().value;
    }

    private getPointOnPath(point: number) {
        return this.pathData.getPath(this.pathID)[point];
    }

    public advanceOnPath() {
        this.vehiclePoint = this.indexGenerator.next().value;
    }

    public getCurrentLocation(): VehicleLocation {
        return {
            pathId: this.pathID,
            vehicleId: this.vehicleId,
            ...this.getPointOnPath(this.vehiclePoint),
        };
    }
}
